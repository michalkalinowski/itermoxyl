#!/usr/bin/env python3

import argparse
import re
import signal
import subprocess
import sys
import glob
import os
from math import ceil
from os.path import expanduser, normpath, join

VERSION_MAJOR = 1
VERSION_MINOR = 3
VERSION_PATCH = 0

CONFIG_PATH = expanduser("~/.ssh/")

home = expanduser("~")

parser = argparse.ArgumentParser(
    description=(
        "Tool to open multiple SSH connections in iTerm2. Use `--find` to search ~/.ssh/config by regex, or `--list` to specify hosts directly."
    )
)
mode_group = parser.add_mutually_exclusive_group(required=False)
mode_group.add_argument(
    "-f", "--find", dest="mode", action="store_const", const="find",
    help="Search hosts from ssh config using regex patterns"
)
mode_group.add_argument(
    "-l", "--list", dest="mode", action="store_const", const="list",
    help="Use the following hosts or IPs directly"
)
parser.add_argument(
    "-r", "--run", dest="should_actually_run", action="store_true", default=False,
    help="Skip confirmation and immediately open panes"
)
parser.add_argument(
    "-d", "--debug", action="store_true", default=False,
    help="Dump the generated AppleScript and exit"
)
parser.add_argument(
    "-v", "--version", action="store_true", default=False,
    help="Print version and exit"
)
parser.add_argument(
    "hosts", nargs="*", help="Regex patterns (in find mode) or explicit hosts/IPs (in list mode)"
)
arguments = parser.parse_args()


# noinspection PyUnusedLocal
def signal_handler(sig, frame):
    # Gracefully exit if Ctrl+C is pressed
    sys.exit(0)

if arguments.version:
    print("{}.{}.{}".format(VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH))
    sys.exit(0)

if not arguments.mode:
    parser.error("One of --find/-f or --list/-l is required (unless using --version)")


def load_known_hosts(known_hosts_file='known_hosts'):
    path = normpath(join(CONFIG_PATH, known_hosts_file))
    hosts = set()
    try:
        with open(path) as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith('#'):
                    continue
                host_field = line.split()[0]
                for h in host_field.split(','):
                    if h.startswith('|'):
                        continue
                    if h.startswith('[') and ']' in h:
                        h = h[1:h.index(']')]
                    hosts.add(h)
    except FileNotFoundError:
        pass
    return hosts


def load_ssh_config(config_file='config'):
    path = normpath(join(CONFIG_PATH, config_file))
    hosts = set()
    try:
        with open(path) as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith('#'):
                    continue
                parts = line.split()
                if parts[0].lower() == 'host' and len(parts) > 1:
                    for h in parts[1:]:
                        if any(c in h for c in ['*', '?', '[', ']']):
                            continue
                        hosts.add(h)
    except FileNotFoundError:
        pass
    return hosts


def load_hosts():
    known = load_known_hosts()
    config = load_ssh_config()
    combined = known.union(config)
    if not combined:
        print("No hosts found in {}known_hosts or {}config".format(CONFIG_PATH, CONFIG_PATH))
        sys.exit(1)
    return combined


def check_if_iterm_version_is_supported():
    process = subprocess.Popen(
        ['osascript', '-'], stdin=subprocess.PIPE, stdout=subprocess.PIPE,
        universal_newlines=True
    )
    version_script = 'set iterm_version to (get version of application "iTerm")'
    version = process.communicate(version_script)[0].strip()
    match = re.search(r"^(\d+)\.(\d+)", version)
    if match:
        major, minor = int(match.group(1)), int(match.group(2))
        return (major > 2) or (major == 2 and minor > 9)
    return False


def prompt_for_confirmation(hosts_count):
    print("\nNumber of panes to open: {}".format(hosts_count))
    sys.stdout.write("Press 'y' to continue (or any other key to abort): ")
    choice = input().strip().lower()
    return choice == "y"


def create_pane(parent, child, orientation):
    return """
        tell pane_{parent}
            set pane_{child} to (split {orientation}ly with same profile)
        end tell
        """.format(parent=parent, child=child, orientation=orientation)


def init_pane(number, host):
    return """
        tell pane_{number}
            write text "ssh {host}"
            set name to "{host}"
        end tell
        """.format(number=number, host=host)


def prepare_and_run_applescript(hosts):
    n = len(hosts)
    vertical_splits = int(ceil(n / 2.0)) - 1
    second_columns = n // 2
    pane_creation = ""

    for i in range(vertical_splits):
        p = i * 2 + 1
        pane_creation += create_pane(p, p + 2, "horizontal")

    for i in range(second_columns):
        p = i * 2 + 1
        pane_creation += create_pane(p, p + 1, "vertical")

    init_script = ''.join(init_pane(i + 1, h) for i, h in enumerate(hosts))

    script = """
        tell application "iTerm"
            activate
            tell current window
                set new_tab to (create tab with default profile)
                tell new_tab
                    set pane_1 to current session
                    {pane_creation}
                    {init_script}
                end tell
            end tell
        end tell
        """.format(pane_creation=pane_creation, init_script=init_script)

    if arguments.debug:
        print(script)
        sys.exit(0)

    process = subprocess.Popen(
        ['osascript', '-'], stdin=subprocess.PIPE, stdout=subprocess.PIPE,
        universal_newlines=True
    )
    output = process.communicate(script)[0]
    if output:
        print(output)


def split_host_by_prefix_and_suffix(host):
    m = re.match(r"(\D+)(\d+)$", host)
    if m:
        return m.group(1), int(m.group(2))
    return host, 0


def sort_hosts(hosts):
    return sorted(hosts, key=lambda h: split_host_by_prefix_and_suffix(h))


def main():
    if not check_if_iterm_version_is_supported():
        print("iTerm2 version not supported or not installed")
        sys.exit(1)

    if arguments.mode == 'list':
        if not arguments.hosts:
            print("No hosts provided for --list mode.")
            sys.exit(1)
        selected_hosts = arguments.hosts
    else:  # find mode
        if not arguments.hosts:
            parser.error("At least one regex pattern is required for --find mode.")

        loose_search = ".*?".join(["(?:{})".format(p) for p in arguments.hosts])
        pat = re.compile(loose_search, re.IGNORECASE)
        available_hosts = load_hosts()

        selected_hosts = list(host for host in available_hosts if pat.search(host))

        if len(selected_hosts) == 0:
            print("No hosts that match the given filter.")
            sys.exit(0)

        selected_hosts = sort_hosts(selected_hosts)

    print("Will open the following terminal panes:\n")
    for host in selected_hosts:
        print("- {}".format(host))

    if arguments.should_actually_run or prompt_for_confirmation(len(selected_hosts)):
        prepare_and_run_applescript(selected_hosts)


if __name__ == '__main__':
    signal.signal(signal.SIGINT, signal_handler)
    main()